"use client";

// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Provider } from "@/components/ui/provider";
import {
  Box,
  Button,
  Dialog,
  Flex,
  Image,
  Input,
  Menu,
  SimpleGrid,
  Spacer,
  Stack,
  Text,
} from "@chakra-ui/react";
import {
  IoIosMenu,
  IoIosNotificationsOutline,
  IoMdClose,
} from "react-icons/io";
import { CiSearch } from "react-icons/ci";
import { RiMenu2Line } from "react-icons/ri";
import { Toaster } from "@/components/ui/toaster";
import { useEffect, useState } from "react";
import { attrBorderGrey, attrBorderGrey2, textBlue } from "@/color";
import { MdOutlineKeyboardArrowRight } from "react-icons/md";
import { Chart as ChartJS, registerables } from "chart.js";
import ChartDataLabels from "chartjs-plugin-datalabels";
import annotationPlugin from "chartjs-plugin-annotation";
import { plusMenuList, recruitmentMenuList } from "./global-data";
import { useRouter } from "next/navigation";
import { InputGroup } from "@/components/ui/input-group";
import { RenderTagList } from "@/components/tag-list";
ChartJS.register(...registerables, ChartDataLabels, annotationPlugin);

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [menuHoverState, setIsMenuHoverState] = useState<string | null>(null);
  const router = useRouter();

  useEffect(() => {
    if (menuHoverState) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "scroll";
    }
  }, [menuHoverState]);

  const NotificationButtonWithMenu = (children: any) => {
    const [showStack, setShowStack] = useState(1);
    const showCount = 10;

    const notificationList = [
      {
        type: "신규 포지션 1",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
      {
        type: "신규 포지션 2",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
      {
        type: "신규 포지션 3",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
      {
        type: "신규 포지션 4",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
      {
        type: "신규 포지션 5",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
      {
        type: "신규 포지션 6",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
      {
        type: "신규 포지션 7",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
      {
        type: "신규 포지션 8",
        desc: "팔로우 중인 디벨로퍼랩에서 Flutter 개발자를 채용 중입니다.",
        date: "2025.03.10 (월)",
      },
    ];

    const NotificationView = (v: any) => {
      return (
        <Box
          p="20px"
          borderRadius="8px"
          className="hover:bg-gray-100 cursor-pointer"
        >
          <Text fontSize="12px" color={textBlue} fontWeight="bold">
            {v.type}
          </Text>

          <Text fontSize="13px" fontWeight="semibold" mt="6px">
            {v.desc}
          </Text>

          <Text fontSize="12px" color="grey" mt="6px">
            {v.date}
          </Text>
        </Box>
      );
    };

    return (
      <Menu.Root
        positioning={{
          placement: "bottom",
          offset: { mainAxis: 30 },
        }}
      >
        <Menu.Trigger asChild>{children}</Menu.Trigger>
        <Menu.Positioner>
          <Menu.Content pl="10px" pr="10px" maxH="550px" w="400px">
            {notificationList.map((v, index) => {
              if (index < showStack * showCount) {
                return (
                  <Box
                    key={index}
                    borderBottom={
                      index < notificationList.length - 1
                        ? attrBorderGrey2
                        : undefined
                    }
                  >
                    {NotificationView(v)}
                  </Box>
                );
              }

              return <Box key={index} />;
            })}

            {/* 알림 더보기 버튼 */}
            {showStack * showCount < notificationList.length && (
              <Flex mt="30px" mb="30px">
                <Spacer />
                <Flex
                  alignItems="center"
                  border={attrBorderGrey2}
                  className="hover:bg-gray-100"
                  pl="20px"
                  pr="10px"
                  pt="6px"
                  pb="6px"
                  borderRadius="8px"
                  onClick={() => {
                    setShowStack(showStack + 1);
                  }}
                >
                  <Text fontSize="15px">알림 더보기</Text>
                  <MdOutlineKeyboardArrowRight size="22px" />
                </Flex>
                <Spacer />
              </Flex>
            )}
          </Menu.Content>
        </Menu.Positioner>
      </Menu.Root>
    );
  };

  const SearchButtonWithDlg = (children: any) => {
    const famousKeywordList = [
      "프론트엔드",
      "백엔드",
      "안드로이드",
      "flutter",
      "ios",
      "취업",
      "임베디드",
      "java",
      "swift",
      "kotlin",
    ];

    return (
      <Dialog.Root size="full" motionPreset="none">
        <Dialog.Trigger asChild>{children}</Dialog.Trigger>
        <Dialog.Positioner>
          <Dialog.Content alignItems="center">
            <Box maxW="700px" w="100%" p="30px">
              {/* 닫기 버튼 */}
              <Flex>
                <Spacer />
                <Dialog.ActionTrigger asChild>
                  <Box className="hover:bg-gray-100 rounded-2xl" p="4px">
                    <IoMdClose size="32px" color="grey" />
                  </Box>
                </Dialog.ActionTrigger>
              </Flex>

              <InputGroup
                mt="20px"
                w="100%"
                startOffset="0px"
                colorPalette="blue"
                startElement={<CiSearch size={20} color="black" />}
              >
                <Input placeholder="검색어를 입력해 주세요" fontSize="16px" />
              </InputGroup>

              <Flex mt="36px">
                <Text fontSize="17px" fontWeight="bold">
                  최근 검색어
                </Text>

                <Spacer />

                <Text
                  fontSize="15px"
                  color="grey"
                  fontWeight="semibold"
                  cursor="pointer"
                >
                  전체삭제
                </Text>
              </Flex>

              <Stack direction="column" mt="16px">
                {RenderTagList(
                  [
                    "개발자",
                    "백엔드",
                    "프론트엔드",
                    "디벨로퍼랩",
                    "구글",
                    "마이크로소프트",
                    "애플",
                    "flutter",
                    "블록체인 개발",
                  ],
                  7
                )}
              </Stack>

              <Text fontSize="17px" fontWeight="bold" mt="36px">
                인기 검색어
              </Text>

              <SimpleGrid columns={2} gap="12px" mt="16px">
                {famousKeywordList.map((v, index) => {
                  return (
                    <Flex
                      key={index}
                      fontSize="16px"
                      borderRadius="4px"
                      className="hover:bg-gray-100"
                      cursor="pointer"
                      pt="5px"
                      pb="5px"
                    >
                      <Text w="30px">{index + 1}.</Text>
                      {v}
                    </Flex>
                  );
                })}
              </SimpleGrid>
            </Box>
          </Dialog.Content>
        </Dialog.Positioner>
      </Dialog.Root>
    );
  };

  const RecruitmentHoverMenu = () => {
    const [curMenu, setCurMenu] = useState("all");

    return (
      <Box w="100%" h="250px" bg="grey">
        <Flex h="250px">
          <Box
            bg="white"
            flex={3}
            textAlign="center"
            maxH="250px"
            overflow="hidden"
          >
            {Object.entries(recruitmentMenuList).map((v: any, index) => {
              return (
                <Text
                  key={index}
                  fontSize={14}
                  mt={3}
                  mb={3}
                  fontWeight={v[0] === "all" ? "bold" : "normal"}
                  color="#323232"
                  _hover={{ fontWeight: "bold", color: "black" }}
                  onMouseEnter={() => {
                    setCurMenu(v[0]);
                  }}
                >
                  {v[1].title}
                </Text>
              );
            })}
          </Box>

          <Box borderLeft={attrBorderGrey} />

          <Box
            bg="white"
            flex={7}
            alignContent={curMenu === "all" ? "center" : "start"}
          >
            {curMenu === "all" ? (
              <Text textAlign="center" color="grey" fontSize={14}>
                직군을 먼저 선택하면 상세 직무를 볼 수 있어요.
              </Text>
            ) : (
              <SimpleGrid
                columns={3}
                maxH="250px"
                overflow="auto"
                pt="24px"
                pb="24px"
                gapY="12px"
              >
                {recruitmentMenuList[curMenu].list.map(
                  (v: any, index: number) => {
                    return (
                      <Box key={index} pl={4} h={30} alignItems="top">
                        <Text
                          fontSize={14}
                          _hover={{ fontWeight: "bold", color: "black" }}
                        >
                          {v}
                        </Text>
                      </Box>
                    );
                  }
                )}
              </SimpleGrid>
            )}
          </Box>
        </Flex>
      </Box>
    );
  };

  const PlusHoverMenu = () => {
    return (
      <SimpleGrid
        columns={5}
        maxH="300px"
        w="100%"
        bg="white"
        overflow="auto"
        pt="24px"
        pb="24px"
      >
        {plusMenuList.map((v, index) => {
          return (
            <Box key={index} ml={8}>
              <Text fontWeight="bold" mb="24px">
                {v.title}
              </Text>
              {v.list.map((v, index) => {
                return (
                  <Text
                    key={index}
                    fontSize={14}
                    mb={4}
                    _hover={{ fontWeight: "bold" }}
                  >
                    {v}
                  </Text>
                );
              })}
            </Box>
          );
        })}

        <Box w="200px" h="100%" borderRadius="10px" bg="#303030" p="16px">
          <Text color="white" fontWeight="bold" whiteSpace="pre-line">
            {`커리어를 
                  쌓으면 포인트가 쌓여요.`}
          </Text>

          <Flex>
            <Text fontSize={14} color="#0095ff" fontWeight="bold">
              포인트 확인하기
            </Text>

            <Box mb="1px">
              <MdOutlineKeyboardArrowRight color="#0095ff" size={20} />
            </Box>
          </Flex>

          <Image src="/savings.png" w="120px" mt="25px" ml="20px" />
        </Box>
      </SimpleGrid>
    );
  };

  const Header = () => {
    return (
      <Box position="fixed" top={0} zIndex={1024} width="100%">
        <Flex
          backgroundColor="white"
          height="59px"
          alignItems="center"
          pl="20px"
          pr="20px"
          borderBottom={attrBorderGrey2}
        >
          <Image
            height="35px"
            src="/developer_logo_horizon.png"
            cursor="pointer"
            onMouseEnter={() => {
              setIsMenuHoverState(null);
            }}
            onClick={() => {
              router.push("/");
            }}
          />

          <Box className="hidden md:block">
            <Flex gap={8}>
              <Flex
                ml={8}
                alignItems="center"
                className="hover:text-purple-400"
                cursor="pointer"
                onClick={() => {
                  // router.push("/list");
                }}
                onMouseEnter={() => {
                  setIsMenuHoverState("recruitment");
                }}
              >
                <RiMenu2Line size={20} />
                <Text fontSize={14} ml="4px" fontWeight="semibold">
                  채용
                </Text>
              </Flex>

              <Text
                className="hover:text-purple-400"
                fontSize={14}
                fontWeight="semibold"
                cursor="pointer"
                onClick={() => {
                  router.push("/events");
                }}
                onMouseEnter={() => {
                  setIsMenuHoverState(null);
                }}
              >
                커리어
              </Text>

              <Text
                className="hover:text-purple-400"
                fontSize={14}
                fontWeight="semibold"
                cursor="pointer"
                onClick={() => {
                  router.push("/community");
                }}
                onMouseEnter={() => {
                  setIsMenuHoverState(null);
                }}
              >
                소셜
              </Text>

              <Text
                className="hover:text-purple-400"
                fontSize={14}
                fontWeight="semibold"
                cursor="pointer"
                onClick={() => {
                  router.push("/cv/list");
                }}
                onMouseEnter={() => {
                  setIsMenuHoverState(null);
                }}
              >
                이력서
              </Text>

              <Text
                className="hover:text-purple-400"
                fontSize={14}
                fontWeight="semibold"
                cursor="pointer"
                onMouseEnter={() => {
                  setIsMenuHoverState("plus");
                }}
              >
                더보기
              </Text>
            </Flex>
          </Box>

          <Spacer />
          <Flex alignItems="center" gap={1}>
            {SearchButtonWithDlg(
              <CiSearch
                size={30}
                className="hover:text-purple-400"
                cursor="pointer"
                onMouseEnter={() => {
                  setIsMenuHoverState(null);
                }}
              />
            )}

            {NotificationButtonWithMenu(
              <IoIosNotificationsOutline
                size={30}
                className="hover:text-purple-400"
                cursor="pointer"
                onMouseEnter={() => {
                  setIsMenuHoverState(null);
                }}
              />
            )}

            <Box className="hidden lg:block">
              <Image
                src="/google.png"
                w="25px"
                h="25px"
                ml="4px"
                className="hover:scale-105 ease-in-out"
                cursor="pointer"
                onClick={() => {
                  router.push("/my/profile");
                }}
                onMouseEnter={() => {
                  setIsMenuHoverState(null);
                }}
              />
            </Box>

            <Box className="block lg:hidden">
              <IoIosMenu size={30} className="hover:text-purple-400" />
            </Box>

            <Box
              className="hidden lg:block"
              onMouseEnter={() => {
                setIsMenuHoverState(null);
              }}
            >
              <Button variant="outline" borderRadius={12} size="sm" ml={4}>
                기업 서비스
              </Button>
            </Box>
          </Flex>
        </Flex>

        {menuHoverState === "recruitment" && <RecruitmentHoverMenu />}
        {menuHoverState === "plus" && <PlusHoverMenu />}
      </Box>
    );
  };

  const naverMapSrc = `https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=${process.env.NAVER_MAP_CLIENT_ID}`;

  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Provider>
          {/* 상단 탭바 */}
          <Box mb="59px">
            <Header />
          </Box>

          {/* 메뉴 오버레이 */}
          {menuHoverState && (
            <Box
              w="100%"
              h="100%"
              bg="rgba(0, 0, 0, 0.5)"
              position="fixed"
              top={0}
              zIndex={1023}
              onMouseEnter={() => {
                setIsMenuHoverState(null);
              }}
            />
          )}

          <Toaster />
          {children}
        </Provider>

        <script type="text/javascript" src={naverMapSrc} />
      </body>
    </html>
  );
}
